[반복문]
for a in [1, 2, 3]: #for (int i=0; i<3; i++)
    print(a)
==> 1, 2, 3

while i<3:  #i=0
    i= i+1
    print(i)

[주석]
' # ': 한 줄 주석
' """ ': 여러 줄 주석

[숫자형 - 지수]
·컴퓨터식 지수 표현 방식: e 또는 E 사용 
-4.24E-10 = (4.24)^(-10)

·8진수: 숫자0 + o/O로 시작
-0o177: 1x8^2 + 7x8^1 + 7x8^0

·16진수: '0x'로 시작
-0x99FD = 9x16^3 + 9x16^2 + Fx16^1 + Dx16^0

[연산자]
·사칙연산: +, -, *, / 사용
·제곱: ** 사용
·나머지 연산자: % 사용
·몫 연산자: // 사용
·복합 연산자: +=, -=, *=, /=, //=, %=, **= 사용

[문자열]
1. " "(큰따옴표) 사용
2. ' '(작은따옴표) 사용
3. """ """ (큰따옴표 3개) 사용
4. ''' ''' (작은따옴표 3개) 사용

{따옴표 포함하기}
1. 문자열에 작은따옴표 포함 -> 문자열을 큰따옴표로 둘러쌈
2. 문자열에 큰따옴표 포함 -> 문자열을 작은따옴표로 둘러쌈
3. 문자열에 큰&작은따옴표 포함 -> 문자열을 \(역슬래시)로 둘러쌈

{여러 줄의 문자열을 변수에 대입}
1. 문자열에 개행 문자'\n' 삽입->"hello\nI'm KimMinJae"
2. 따옴표 3개짜리 사용 -> """hello
                            I'm KimMinJae
                            """

{이스케이프 코드} - 문자열 안의 문자 조합
' \n ' = 줄바꿈
' \t ' = tab
' \\ ' = 문자열에 역슬래시 표현
' \' ' = 문자열에 작따 표현
' \" ' = 문자열에 큰따 표현
' \r ' = 캐리지 리턴: 개행 후 커서를 맨 앞으로 이동
' \f ' = 폼 피드: 개행 후 커서를 맨 뒤로 이동
' \b ' = 백 스페이스
' \000 ' = NULL 문자

[문자열 연산]
·문자열 더하기, 곱하기 가능

{문자열 덧셈}
·'+' 사용 - 문자열 이어붙이기
    head = "Python"
    tail = "Programming"
    print( head+tail ) => PythonProgramming

{문자열 곱셈}
·'*' 사용 - n번 반복
    a = "py"
    print(a*2) => pypy

·문자열곱셈 응용
    print('='*19)
    print("Fuck\t\tyou")
    print('='*19)

[문자열 길이]
·len() 사용(스페이스바 포함)
    a="Fuckyou"
    print(len(a))

[문자열 인덱싱]
a = "Life is Good"
print(a[3]) => 'e'

[문자열 슬라이싱]
{문자열의 일부만 잘라냄}
    a = "Life is Good"  #len(a) = 12
    b = a[8] + ··· + a[11] or a[8:11]
    print(b) => 'Good'
· :(콜론)은 끝문자(n:m 중 m)를 포함하지 않음
    a[n] ~ a[m-1]까지 출력됨

{슬라이싱에 -(빼기) 사용 가능}
· -n은 문자열 끝에서 n-1번째 문자까지 출력
    a[5:-5] => 'is'
    a[-8:9] => ' is G'
    
{문자열 나누기}
    a='KimMinJae'
    last=a[:3]
    first=a[3:]
    print(last) => 'KIM'
    print(first)=> 'MINJAE'

[문자열 포매팅]
·문자열 안에 변수 삽입
1. 숫자 바로 대입
    a = "I eat %d apples." % 4
    print(a) => "I eat 4 apples."

2. 문자열 바로 대입
    a = "I eat %s apples." % "many
    print(a) => "I eat many apples."

3. 변수 대입
    count = 123
    a = "I eat %d apples." % count
    print(a) ="I eat 123 apples."

4. 2개 이상의 값 대입: % 다음에 괄호 사용
    count = 123
    a = "I eat %d %s apples." % (count, "rotten")
    print(a) => "I eat 123 rotten apples."

+) %s 포맷 코드 쓰면 어떤 자료형이든 삽입 가능
+) 문자열 안에 '%'를 쓰고싶으면 %% 포맷 코드 사용
    count = 123
    a = "He is %d%% nigga" % 90
    print(a) => "He is 90% nigga"

[포맷 코드와 숫자 함께 사용]
{정렬과 공백}
·비우고 싶은 칸수=5일 때: %5s
·왼쪽 정렬: %-5s
    a = "%-10sjane" % "hi"
    print(a) => "hi        jane"

{소수점 표현}
· %0.[자리수]f || %.[자리수]사용
    a = "%.5f" % 3.4398544
    print(a)=>3.43985
    a = "%0.5f" % 3.4398544
+) 공백 추가도 가능
    b = "%10.5f" % .4398544
    print(a) => 3.43985
    print(b) =>      3.43985

[format 함수로 포매팅]
·숫자 바로 대입
    print(" I eat {0} apples".format(3))
    => "I eat 3 apples"

·복수 데이터 입력: "{0} {1} {2}".format( d1, d2, d3)

·이름으로 넣기
    print(" I eat {count} {condition} apples"
      .format(count=13, condition="rotten"))
      => "I eat 13 rotten apples"

·인덱스와 이름 혼용
"I ate {0} apples. so I was sick for {day} days."
    .format(10, day=3)
    =>'I ate 10 apples. so I was sick for 3 days.'

·왼쪽/오른쪽 정렬 #화살표 방향으로 정렬-> 이해 쉬움
    "{0:<10}".format("hi")
    => 'hi        '
    "{0:>10}".format("hi")
    => '        hi'
·가운데 정렬: :>, :< 대신 :^ 사용
·공백 채우기: :<, :>, :^ 앞에 채울 문자 입력
    "{0:=^10}".format("hi")
    => '====hi===='
·소수점 표현
    y=3.23784387
    "{0:0.4f}".format(y)
    =>'3.2378'
·문자열 포매팅 시 {}(중괄호) 2개 사용
    "{{ and }}".format()
    => '{ and }'
·f문자열 포매팅
    name="김민재"
    age=21
    f'내 이름은 {name}, 나이는 {age}살'
    => '내 이름은 김민재, 나이는 21살'
+) 중괄호 안에 사칙연산자 삽입 가능
**딕셔너리 사용법
    dictionary= {'name':'김민재', 'age':21}
    '내 이름은 {name}, 나이는 {age}살'
    =>'내 이름은 {name}, 나이는 {age}살'
·정렬, 공백 채우기 모두 중괄호 안에서 처리
·소수점 표현
    f'{y:15.5f}'    
    => '        3.39849'    #총 자리수가 15
·문자열 표시: f'{{  }}로 표현

[문자열 관련 함수]
a='MotherFucker'
·count(): 특정 문자의 개수 세기
          찾는 문자가 없으면 -1 반환
    a.count('e') => 2
·find(d1): 특정 문자의 위치 반환
-문자 중복 시 제일 처음 위치 반환
·index(d1): 특정 문자의 위치 반환
          찾는 문자가 없으면 오류 발생
·join(): 문자 삽입
-사용법: "삽입할 문자".foin('삽입될 문자열')
    ' '.join('Fucker')
    => 'F u c k e r'
·upper()/lower(): 소문자->대문자 / 대문자->소문자
-실제 문자열은 변경X, 함수의 리턴값만 변경됨
-바꾸고 싶으면 a= a.upper/a.lower같이 대입해야 함
·lstrip()/rstrip(): 왼쪽/오른쪽 공백 지우기
·strip(): 양쪽 공백 지우기
·replace("s1", "s2"): s1을 s2로 문자열 교체
·split(): 문자열 나누기 - 기본: 토큰 단위, 특정 값 입력: 특정 값 기준
·
·